
import audio.StdSound;
import figuras.Config;
import figuras.base.Sprite;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Timer;
import logic.GameLogic;

/**
 *
 * @author Tu nombre
 */
public class GameApp extends javax.swing.JFrame {

    /**
     * El set de teclas pulsadas. Contiene códigos de rastreo
     */
    Set<Integer> teclasPulsadas;

    /**
     * El buffer donde dibujamos un fotograma
     */
    BufferedImage buffer;

    /**
     * El temporizador, para indicar que se debe pintar un frame en el buffer
     */
    Timer timer;

    /**
     * La lógica del juego, para no mezclarla con el frame
     */
    GameLogic logica;
    
    /**
     * Constructor del frame. Utilizalo para inicializar variables que no
     * requieran la ventana visible
     */
    public GameApp() {
        initComponents();
        teclasPulsadas = new HashSet<>();
        logica = new GameLogic();
        this.setLocationRelativeTo(null);  // Centra el frame
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Arkanoid");
        setName("gameFrame"); // NOI18N
        setPreferredSize(new java.awt.Dimension(500, 650));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Éste método es invocado automáticamente para pintar el contenido del
     * frame en la pantalla.
     */
    @Override
    public void paint(Graphics g) {
        g.drawImage(buffer, 0, 0, null);
        
    }

    /**
     * invocado por el timer para dibujar un fotograma en el buffer.
     */
    private void pintarFotograma() {
        // Acceder al contexto gráfico del buffer
        Graphics2D g = (Graphics2D) buffer.getGraphics();
        // Dejamos que la lógica desencadene el trabajo duro.
        logica.dibujarYActualizarTodo(g);  // https://u.nu/cubs
        if (!teclasPulsadas.isEmpty()) {
            logica.gestionarTeclas(teclasPulsadas);
        }
        repaint();
    }

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // Crear un temporizador e inicializarlo
        timer = new Timer(40, (e) -> {
            pintarFotograma();
        });
        timer.start();

        // Crear el buffer
        buffer = new BufferedImage(this.getWidth(), this.getHeight(), BufferedImage.TYPE_INT_RGB);

        // Crear el manejador de eventos de teclado
        addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e) {
                /* Nada */
            }

            @Override
            public void keyPressed(KeyEvent e) {
                teclasPulsadas.add(e.getKeyCode());
            }

            @Override
            public void keyReleased(KeyEvent e) {
                teclasPulsadas.remove(e.getKeyCode());
            }
        });
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GameApp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
